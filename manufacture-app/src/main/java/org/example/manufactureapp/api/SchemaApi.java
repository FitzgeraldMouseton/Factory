/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.manufactureapp.api;


import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.example.manufactureapp.model.RobotSchemaRequest;
import org.example.manufactureapp.model.RobotSchemaResponse;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.annotation.Generated;
import javax.validation.Valid;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "schema", description = "Everything about robot's schema")
public interface SchemaApi {

    /**
     * POST /schema : Create robot&#39;s schema
     * Create robot&#39;s schema
     *
     * @param robotSchemaRequest  (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Robot not found (status code 404)
     *         or Validation exception (status code 422)
     */
    @Operation(
        operationId = "createSchema",
        summary = "Create robot's schema",
        description = "Create robot's schema",
        tags = { "schema" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RobotSchemaResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Robot not found"),
            @ApiResponse(responseCode = "422", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/schema",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<RobotSchemaResponse> createSchema(
        @Parameter(name = "RobotSchemaRequest", description = "", required = true) @Valid @RequestBody RobotSchemaRequest robotSchemaRequest
    );

}
