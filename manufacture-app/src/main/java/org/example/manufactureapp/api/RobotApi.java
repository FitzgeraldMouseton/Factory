///**
// * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
// * https://openapi-generator.tech
// * Do not edit the class manually.
// */
//package org.example.manufactureapp.api;
//
//import io.swagger.v3.oas.annotations.Operation;
//import io.swagger.v3.oas.annotations.Parameter;
//import io.swagger.v3.oas.annotations.Parameters;
//import io.swagger.v3.oas.annotations.media.ArraySchema;
//import io.swagger.v3.oas.annotations.media.Content;
//import io.swagger.v3.oas.annotations.media.Schema;
//import io.swagger.v3.oas.annotations.responses.ApiResponse;
//import io.swagger.v3.oas.annotations.security.SecurityRequirement;
//import io.swagger.v3.oas.annotations.tags.Tag;
//import io.swagger.v3.oas.annotations.enums.ParameterIn;
//import org.example.manufactureapp.model.ModelApiResponse;
//import org.example.manufactureapp.model.RobotFullResponse;
//import org.example.manufactureapp.model.RobotRequest;
//import org.springframework.http.HttpStatus;
//import org.springframework.http.MediaType;
//import org.springframework.http.ResponseEntity;
//import org.springframework.validation.annotation.Validated;
//import org.springframework.web.bind.annotation.*;
//import org.springframework.web.context.request.NativeWebRequest;
//import org.springframework.web.multipart.MultipartFile;
//
//import javax.validation.Valid;
//import javax.validation.constraints.*;
//import java.util.List;
//import java.util.Map;
//import java.util.Optional;
//import javax.annotation.Generated;
//
//@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
//@Validated
//@Tag(name = "robot", description = "Everything about robots")
//public interface RobotApi {
//
//    /**
//     * POST /robot/create : Assemble a new robot
//     * Assemble a new robot
//     *
//     * @param robotRequest Assemble a new robot (required)
//     * @return Successful operation (status code 200)
//     *         or Invalid input (status code 400)
//     *         or Validation exception (status code 422)
//     */
//    @Operation(
//        operationId = "addRobot",
//        summary = "Assemble a new robot",
//        description = "Assemble a new robot",
//        tags = { "robot" },
//        responses = {
//            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
//                @Content(mediaType = "application/json", schema = @Schema(implementation = RobotRequest.class))
//            }),
//            @ApiResponse(responseCode = "400", description = "Invalid input"),
//            @ApiResponse(responseCode = "422", description = "Validation exception")
//        }
//    )
//    @RequestMapping(
//        method = RequestMethod.POST,
//        value = "/robot/create",
//        produces = { "application/json" },
//        consumes = { "application/json" }
//    )
//
//    ResponseEntity<RobotFullResponse> addRobot(
//        @Parameter(name = "RobotRequest", description = "Assemble a new robot", required = true) @Valid @RequestBody RobotRequest robotRequest
//    );
//
//
//    /**
//     * DELETE /robot/{robotId} : Delete a robot
//     * delete a robot
//     *
//     * @param robotId Robot id to delete (required)
//     * @return Invalid robot value (status code 400)
//     */
//    @Operation(
//        operationId = "deleteRobot",
//        summary = "Delete a robot",
//        description = "delete a robot",
//        tags = { "robot" },
//        responses = {
//            @ApiResponse(responseCode = "400", description = "Invalid robot value")
//        }
//    )
//    @RequestMapping(
//        method = RequestMethod.DELETE,
//        value = "/robot/{robotId}"
//    )
//
//    ResponseEntity<Void> deleteRobot(
//        @Parameter(name = "robotId", description = "Robot id to delete", required = true, in = ParameterIn.PATH) @PathVariable("robotId") Long robotId
//    );
//
//
//    /**
//     * GET /robot/findByStatus : Finds Robot by status
//     *
//     * @param id  (required)
//     * @return successful operation (status code 200)
//     *         or Invalid status value (status code 400)
//     */
//    @Operation(
//        operationId = "findRobotByStatus",
//        summary = "Finds Robot by status",
//        tags = { "robot" },
//        responses = {
//            @ApiResponse(responseCode = "200", description = "successful operation", content = {
//                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RobotFullResponse.class)))
//            }),
//            @ApiResponse(responseCode = "400", description = "Invalid status value")
//        }
//    )
//    @RequestMapping(
//        method = RequestMethod.GET,
//        value = "/robot/findByStatus",
//        produces = { "application/json" }
//    )
//
//    ResponseEntity<List<RobotFullResponse>> findRobotByStatus(
//        @NotNull @Parameter(name = "id", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = true, defaultValue = "DONE") String id
//    );
//
//
//    /**
//     * GET /robot/{robotId} : Find robot by ID
//     * Returns a single robot
//     *
//     * @param robotId ID of robot to return (required)
//     * @return successful operation (status code 200)
//     *         or Invalid ID supplied (status code 400)
//     *         or Robot not found (status code 404)
//     */
//    @Operation(
//        operationId = "getRobotById",
//        summary = "Find robot by ID",
//        description = "Returns a single robot",
//        tags = { "robot" },
//        responses = {
//            @ApiResponse(responseCode = "200", description = "successful operation", content = {
//                @Content(mediaType = "application/json", schema = @Schema(implementation = RobotFullResponse.class))
//            }),
//            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
//            @ApiResponse(responseCode = "404", description = "Robot not found")
//        },
//        security = {
//            @SecurityRequirement(name = "api_key")
//        }
//    )
//    @RequestMapping(
//        method = RequestMethod.GET,
//        value = "/robot/{robotId}",
//        produces = { "application/json" }
//    )
//
//    ResponseEntity<RobotFullResponse> getRobotById(
//        @Parameter(name = "robotId", description = "ID of robot to return", required = true, in = ParameterIn.PATH) @PathVariable("robotId") Long robotId
//    );
//
//
//    /**
//     * PUT /robot : Update an existing robot
//     * Update an existing robot by Id
//     *
//     * @param robotRequest Update an existing robot in the store (required)
//     * @return Successful operation (status code 200)
//     *         or Invalid ID supplied (status code 400)
//     *         or Robot not found (status code 404)
//     *         or Validation exception (status code 422)
//     */
//    @Operation(
//        operationId = "updateRobot",
//        summary = "Update an existing robot",
//        description = "Update an existing robot by Id",
//        tags = { "robot" },
//        responses = {
//            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
//                @Content(mediaType = "application/json", schema = @Schema(implementation = RobotRequest.class))
//            }),
//            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
//            @ApiResponse(responseCode = "404", description = "Robot not found"),
//            @ApiResponse(responseCode = "422", description = "Validation exception")
//        }
//    )
//    @RequestMapping(
//        method = RequestMethod.PUT,
//        value = "/robot",
//        produces = { "application/json" },
//        consumes = { "application/json" }
//    )
//
//    ResponseEntity<RobotRequest> updateRobot(
//        @Parameter(name = "RobotRequest", description = "Update an existing robot in the store", required = true) @Valid @RequestBody RobotRequest robotRequest
//    );
//
//
//    /**
//     * POST /robor/{robotId}/uploadImage : uploads an image
//     *
//     *
//     * @param robotId ID of robot to update (required)
//     * @param additionalMetadata Additional Metadata (optional)
//     * @param body  (optional)
//     * @return successful operation (status code 200)
//     */
//    @Operation(
//        operationId = "uploadFile",
//        summary = "uploads an image",
//        description = "",
//        tags = { "robot" },
//        responses = {
//            @ApiResponse(responseCode = "200", description = "successful operation", content = {
//                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
//            })
//        },
//        security = {
//            @SecurityRequirement(name = "petstore_auth", scopes={ "write:pets", "read:pets" })
//        }
//    )
//    @RequestMapping(
//        method = RequestMethod.POST,
//        value = "/robor/{robotId}/uploadImage",
//        produces = { "application/json" },
//        consumes = { "application/octet-stream" }
//    )
//
//    ResponseEntity<ModelApiResponse> uploadFile(
//        @Parameter(name = "robotId", description = "ID of robot to update", required = true, in = ParameterIn.PATH) @PathVariable("robotId") Long robotId,
//        @Parameter(name = "additionalMetadata", description = "Additional Metadata", in = ParameterIn.QUERY) @Valid @RequestParam(value = "additionalMetadata", required = false) String additionalMetadata,
//        @Parameter(name = "body", description = "") @Valid @RequestBody(required = false) org.springframework.core.io.Resource body
//    );
//
//}
